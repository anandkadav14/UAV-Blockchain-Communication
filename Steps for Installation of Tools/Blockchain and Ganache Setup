1. Ganache
Version: Ganache v7.9.1

Download Link: Ganache Download

Purpose: Ganache is a personal blockchain for Ethereum development. It allows you to deploy contracts, develop your applications, and run tests.

Steps to Set Up Ganache:
Download and install Ganache from the link provided.
Launch Ganache. Upon opening, it will automatically create a local Ethereum blockchain with a set of test accounts and private keys.
Make sure Ganache is running before attempting to deploy your contracts.
Note the RPC server URL in Ganache (e.g., http://127.0.0.1:7545) as you'll need this for your truffle-config.js file.

2. Truffle
Version: Truffle v5.11.5 (core: 5.11.5)

Installation Command: npm install -g truffle
Purpose: Truffle is a development environment, testing framework, and asset pipeline for Ethereum. It is used to compile, test, and deploy smart contracts.

Steps to Install Truffle:
Open a terminal or command prompt.
Run the following command to install Truffle globally: npm install -g truffle
Verify installation by running: truffle version
This should display the installed version of Truffle.

3. Node.js
Version: Node.js v16.20.2

Download Link: Node.js Download

Purpose: Node.js is a JavaScript runtime built on Chrome's V8 engine. It is required to run Truffle and Ganache.

Steps to Install Node.js:
Go to the Node.js download page linked above.
Download and install the latest LTS (Long Term Support) version for your operating system.
After installation, verify it by running:
node -v
npm -v
This will confirm Node.js and npm (Node Package Manager) are installed.

4. Solidity
Version: Solidity ^0.8.10

Purpose: Solidity is the programming language used to write smart contracts on the Ethereum blockchain.

Solidity Version in Contracts:
In the header of each smart contract file, include the following line to specify the Solidity version used:

pragma solidity ^0.8.10;
This ensures the contracts are compiled with the correct version of Solidity.

5. Web3.js
Version: Web3.js v1.10.0

Installation Command: npm install web3
Purpose: Web3.js is a JavaScript library that allows you to interact with the Ethereum blockchain and its smart contracts. It is commonly used for front-end integration with smart contracts.

Steps to Install Web3.js:
In your project directory, run the following command to install Web3.js: npm install web3

Setting Up Ganache
To set up Ganache and connect it to your project, follow these steps:

Steps to Run Ganache:
Open Ganache: Double-click the Ganache application to launch it.
Create a Workspace:
You can choose "Quickstart" to immediately start a new workspace with predefined settings.
Alternatively, click "New Workspace" and customize your network settings.
Note the RPC Server URL: You'll need to configure Truffle to connect to this network. The default is http://127.0.0.1:7545.
Ensure Ganache is Running: Ganache should be running in the background while you deploy your contracts using Truffle.
Installing Truffle and Compiling Contracts
Once you have Ganache and Node.js installed, follow these steps to install Truffle and deploy your smart contracts.

1. Install Dependencies for Your Project
Navigate to your project directory in the terminal: cd your-project-directory
Install project dependencies: npm install

2. Initialize Truffle Project
If you havenâ€™t already initialized the Truffle project, you can do so with: truffle init
This creates the necessary folder structure for a Truffle project (e.g., contracts, migrations, test).

3. Configure Truffle to Connect to Ganache
Open the truffle-config.js (or truffle.js) file in your project directory.
Update the networks section to point to your Ganache instance:
javascript
 
module.exports = {
  networks: {
    development: {
      host: "127.0.0.1",
      port: 7545,  // Port number used by Ganache
      network_id: "*",  // Match any network id
    }
  },
  compilers: {
    solc: {
      version: "0.8.10",  // Match Solidity version
    }
  }
};

4. Compile Smart Contracts
Once Truffle is configured, compile your smart contracts with:

truffle compile
This command will compile the Solidity files in the contracts directory and generate ABI and bytecode.

5. Deploy Contracts to Ganache
First, make sure Ganache is running.
Run the migration script to deploy the contracts: truffle migrate --reset
The --reset flag ensures that the contracts are redeployed, even if they were deployed previously.

6. Verify Deployment
After running the migration, you can verify your contracts are deployed on Ganache by checking the Ganache UI, where you'll see contract addresses under the "Contracts" section.
