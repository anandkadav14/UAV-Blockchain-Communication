Step 1: Install Prerequisites
Operating System: Ensure you have Windows 10/11 installed with the latest updates.
Visual Studio:
Download and install Visual Studio 2019 or later from the official website.
During installation, select the following workloads:
Desktop development with C++
Game development with C++
Ensure you also have the C++/CLI Support and .NET desktop development installed.
Python:
Install Python 3.8 or later from the official website.
Add Python to your system PATH during installation.
Step 2: Install Unreal Engine 4.27.2
Epic Games Launcher:
Download and install the Epic Games Launcher from the Epic Games website.
Log in or create an Epic Games account.
Unreal Engine 4.27.2:
In the Epic Games Launcher, go to the Unreal Engine tab.
Under the Library section, click the + button next to Engine Versions.
Select version 4.27.2 and click Install.
Choose the installation directory and start the installation.
Step 3: Install AirSim Plugin
Clone AirSim Repository:
Open a terminal and navigate to your preferred directory.
Run the following command to clone the AirSim repository:
bash
Copy code
git clone https://github.com/microsoft/AirSim.git
Build AirSim:
Navigate to the cloned AirSim directory:
bash
Copy code
cd AirSim
Run the build script:
bash
Copy code
build.cmd
This script will download the necessary dependencies and compile AirSim.
After the build is complete, the Unreal/Plugins/AirSim folder will contain the AirSim plugin.
Step 4: Create an Unreal Engine Project
Open Unreal Engine 4.27.2:
Launch the Epic Games Launcher and open Unreal Engine 4.27.2.
Create a New Project:
Select Games and click Next.
Choose Blank and click Next.
Set Blueprint as the project type.
Choose No Starter Content.
Set the target platform to Desktop/Console and click Create.
Integrate AirSim Plugin:
After the project is created, close Unreal Engine.
Copy the AirSim folder from the Unreal/Plugins/ directory (from the cloned AirSim repository) into your Unreal projectâ€™s Plugins folder. If the Plugins folder does not exist, create it in the root directory of your project.
Reopen your Unreal Engine project. The AirSim plugin should be detected and enabled automatically.
Step 5: Install Mission Planner
Download and Install:
Download the Mission Planner installer from the official website.
Run the installer and follow the on-screen instructions.
Configuration:
Open Mission Planner after installation.
Update to the latest version using the inbuilt update feature.
Step 6: Integrate Mission Planner with AirSim
AirSim Settings:
In your Unreal Engine project directory, navigate to the Documents/AirSim folder and open the settings.json file. If it does not exist, create one.
Use the following basic settings to integrate AirSim with Mission Planner:
json
Copy code
{
  "SettingsVersion": 1.2,
  "SimMode": "Multirotor",
  "Vehicles": {
    "Drone1": {
      "VehicleType": "SimpleFlight",
      "UseSerial": false,
      "EnableCollisionPassthro": true,
      "AutoCreate": true,
      "ApiServerPort": 41451
    }
  }
}
Save the file.
Configure Network:
Ensure that both the computer running Unreal Engine/AirSim and the one running Mission Planner are on the same local network.
Obtain the IP address of the machine running Unreal Engine.
Mission Planner Configuration:
Open Mission Planner on the machine that will act as the ground control station.
Go to Setup > Optional Hardware > Telemetry Radio.
Set the Remote IP to the IP address of the machine running Unreal Engine.
Set the Remote Port to the ApiServerPort specified in the settings.json file (41451 in this example).
Click Connect.
Step 7: Test the Integration
Launch Simulation:
Open your Unreal Engine project and start the simulation by pressing the Play button.
AirSim should now be active, and you should see the simulated drone in the scene.
Connect Mission Planner:
In Mission Planner, click the Connect button to establish a connection with the simulated drone.
You should see telemetry data and be able to control the drone from Mission Planner.
Step 8: Optional - Multiple Drones (Swarm Simulation)
Modify settings.json:
For multiple drones, expand the Vehicles section of settings.json:
json
Copy code
{
  "SettingsVersion": 1.2,
  "SimMode": "Multirotor",
  "Vehicles": {
    "Drone1": {
      "VehicleType": "SimpleFlight",
      "UseSerial": false,
      "EnableCollisionPassthro": true,
      "AutoCreate": true,
      "ApiServerPort": 41451
    },
    "Drone2": {
      "VehicleType": "SimpleFlight",
      "UseSerial": false,
      "EnableCollisionPassthro": true,
      "AutoCreate": true,
      "ApiServerPort": 41452
    }
  }
}
Ensure each drone has a unique ApiServerPort.
Configure Mission Planner:
Open multiple instances of Mission Planner if you have multiple GCS computers.
Connect each instance to a different drone by specifying the respective ApiServerPort.
Step 9: Final Checks
Ensure the local network connection is stable.
Verify that Windows Firewall allows communication on the specified ports.
Test the setup by flying the drone(s) using Mission Planner.
This setup should give you a fully functional drone simulation environment where you can control and monitor drones over a local network using Unreal Engine, AirSim, and Mission Planner.
